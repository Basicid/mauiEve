@*@page "/employees/info/{EmployeeId:int}"
@inject HttpClient http
@inject NavigationManager manager

<h3>Employee Information</h3>

@if (employee == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <p><strong>Image:</strong> <img height="50" width="50" src="@employee.ImageUrl"></p>
    <p><strong>Name:</strong> @employee.Name</p>
    <p><strong>Join Date:</strong> @employee.JoinDate.ToShortDateString()</p>
    <p><strong>Working?:</strong> @employee.IsWorking</p>

    <h4>Experiences:</h4>
    <ul>
        @foreach (var experience in employee.Experiences)
        {
            <li>@experience.PositionName, @experience.CompanyName</li>
        }
    </ul>

    <button class="btn btn-secondary" @onclick="Close">Close</button>
}

@code {
    [Parameter]
    public int EmployeeId { get; set; }
    private Employee employee;

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"api/Employees/{EmployeeId}");
        if (response.IsSuccessStatusCode)
        {
            employee = await response.Content.ReadFromJsonAsync<Employee>();
        }
        else
        {
            manager.NavigateTo("employees");
        }
    }

    private void Close()
    {
        manager.NavigateTo("employees");
    }
}
*@

@*@page "/employees/info/{EmployeeId:int}"
@inject HttpClient http
@inject NavigationManager manager

<h3>Employee Information</h3>

@if (employee == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card">
        <img class="card-img-top img-thumbnail" src="@employee.ImageUrl" alt="Employee Image">
        <div class="card-body">
            <h5 class="card-title">@employee.Name</h5>
            <p class="card-text">
                <strong>ID:</strong> @employee.Id<br />
                <strong>Join Date:</strong> @employee.JoinDate.ToShortDateString()<br />
                <strong>Working?:</strong> @employee.IsWorking
            </p>
            <h4>Experiences:</h4>
            @foreach (var experience in employee.Experiences)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">@experience.PositionName</h6>
                        <p class="card-text">@experience.CompanyName</p>
                    </div>
                </div>
            }
        </div>
        <div class="card-footer">
            <button class="btn btn-secondary" @onclick="Close">Close</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int EmployeeId { get; set; }
    private Employee employee;

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"api/Employees/{EmployeeId}");
        if (response.IsSuccessStatusCode)
        {
            employee = await response.Content.ReadFromJsonAsync<Employee>();
        }
        else
        {
            manager.NavigateTo("employees");
        }
    }

    private void Close()
    {
        manager.NavigateTo("employees");
    }
}*@


@page "/employees/info/{EmployeeId:int}"
@inject HttpClient http
@inject NavigationManager manager



@if (employee == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <h3>Information of @employee.Name </h3>
    <div class="col-md-4 mb-4">
        <div class="card">
            <img class="card-img-top" src="@employee.ImageUrl" alt="Employee Image" height="100" width="100">
            <div class="card-body">
                <h5 class="card-title">@employee.Name</h5>
                <p class="card-text">
                    <strong>ID:</strong> @employee.Id<br />
                    <strong>Join Date:</strong> @employee.JoinDate.ToShortDateString()<br />
                    <strong>Working?: </strong> @(employee.IsWorking ? "Yes" : "No")
                </p>
                <h4>Experiences:</h4>
                @foreach (var experience in employee.Experiences)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">@experience.PositionName</h6>
                            <p class="card-text">@experience.CompanyName</p>
                        </div>
                    </div>
                }
            </div>
            <div class="card-footer">
                <button class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
   </div>
}

@code {
    [Parameter]
    public int EmployeeId { get; set; }
    private Employee employee;

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"api/Employees/{EmployeeId}");
        if (response.IsSuccessStatusCode)
        {
            employee = await response.Content.ReadFromJsonAsync<Employee>();
        }
        else
        {
            manager.NavigateTo("employees");
        }
    }

    private void Close()
    {
        manager.NavigateTo("employees");
    }
}

