@page "/employees"
@inject HttpClient http
@inject IJSRuntime jsRuntime
@inject NavigationManager manager

<div class="form-group">
    <a class="btn btn-success" href="employees/create">Create New Employee</a>
</div>
@if (employees == null)
{
    <br />
    <br />
    <br />
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (employees.Count == 0)
{
    <text>There is no record to show</text>
}
else
{
    <br />
    <h2>Employee List</h2>

    <br/>
    <div class="row">
        @foreach (var employee in employees)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <img class="card-img-top" src="@employee.ImageUrl" alt="Employee Image">
                    <div class="card-body">
                        <h5 class="card-title">@employee.Name</h5>
                        <p class="card-text">
                            <strong>ID:</strong> @employee.Id<br />
                            <strong>Join Date:</strong> @employee.JoinDate.ToShortDateString()<br />
                            <strong>Working?: </strong> @(employee.IsWorking ? "Yes" : "No")
                        </p>
                        <div class="text-center">
                            <a class="btn btn-dark" href="employees/edit/@employee.Id">Edit</a>
                            <button class="btn btn-info" @onclick="()=>ShowEmployeeInfo(employee.Id)">Info</button>
                            <button class="btn btn-danger" @onclick="async () => await Delete(employee)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    List<Employee> employees { get; set; }

    protected async override Task OnInitializedAsync()
    {
        employees = await http.GetFromJsonAsync<List<Employee>>("api/Employees");
    }

    private void ShowEmployeeInfo(int employeeId)
    {
        manager.NavigateTo($"employees/info/{employeeId}");
    }

    private async Task Delete(Employee employee)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?");
        if (confirmed)
        {
            var response = await http.DeleteAsync($"api/Employees/{employee.Id}");
            if (response.IsSuccessStatusCode)
            {
                employees.Remove(employee);
            }
            else
            {
                // Handle error if needed
            }
        }
    }
}
